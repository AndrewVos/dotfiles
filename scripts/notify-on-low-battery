#!/usr/bin/env python

import re
import subprocess
import os
import time
import random

class Notifier:
    def __init__(self):
        self.needs_reset = True

    def percentage(self):
        total = 0
        max = 0

        for battery in range(0, 9):
            if os.path.isdir("/sys/class/power_supply/BAT" + str(battery)):
                max += 100
                process = subprocess.run(
                        ['upower', '-i', '/org/freedesktop/UPower/devices/battery_BAT' + str(battery)],
                        stdout=subprocess.PIPE
                        )
                output = str(process.stdout)
                match = re.search('percentage:\s*([0-9]+)', output)
                total += int(match.groups()[0])

        return (total / max) * 100

    def charging(self):
        for battery in range(0, 9):
            if os.path.isdir("/sys/class/power_supply/BAT" + str(battery)):
                process = subprocess.run(
                        ['upower', '-i', '/org/freedesktop/UPower/devices/battery_BAT' + str(battery)],
                        stdout=subprocess.PIPE
                        )
                output = str(process.stdout)
                return re.search('state:\s*charging', output) != None

    def notify(self):
        self.needs_reset = True
        r = "{0:.4f}".format(random.random())
        g = "{0:.4f}".format(random.random())
        b = "{0:.4f}".format(random.random())
        subprocess.call(["xrandr", "--output", "eDP-1", "--gamma", "{}:{}:{}".format(r, g, b)])

    def reset(self):
        if self.needs_reset:
            self.needs_reset = False
            subprocess.call(["xrandr", "--output", "eDP-1", "--gamma", "1:1:1"])

    def loop(self):
        while True:
            if self.charging() or self.percentage() >= 10:
                self.reset()
            else:
                self.notify()
            time.sleep(10)

notifier = Notifier()
notifier.loop()
