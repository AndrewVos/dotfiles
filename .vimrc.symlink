set shell=/bin/zsh

" vundle {{{
  set nocompatible
  filetype on
  filetype off
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()
  Bundle 'gmarik/vundle'
" }}}

" vim {{{
  "Don't show the vim intro text
  set shortmess=I

  "Turn syntax highlighting on
  syntax on

  "Highlight tailing whitespace
  set list listchars=tab:\ \ ,trail:Â·

  "Highlight search
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase

  "Stop vim from searching for insert completion words in all files referenced
  set complete-=i

  "Make sure undo history is kept for files in buffer.
  set hidden

  "Turn indentation on
  filetype indent on

  "Enable filetype plugins
  filetype plugin on

  "Disable folding because it is evil
  set nofoldenable

  "Turn word wrap off
  set nowrap

  "Allow backspace to delete end of line, indent and start of line characters
  set backspace=indent,eol,start

  "Convert tabs to spaces
  set expandtab

  "Set tab size
  set tabstop=2

  "The number of spaces inserted for a tab
  set shiftwidth=2
" }}}

" backup to ~/.tmp {{{
  set backup
  set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
  set backupskip=/tmp/*,/private/tmp/* 
  set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
  set writebackup
" }}}

Bundle 'ervandew/supertab'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-commentary'
Bundle 'jamessan/vim-gnupg'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-cucumber'
Bundle 'scrooloose/syntastic'

" Jump to last cursor position {{{
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
" }}}

" {{{ Go
  Bundle 'jnwhiteh/vim-golang'
  "Not sure why vim-golang doesn't include this.
  autocmd BufNewFile,BufReadPost *.go set filetype=go

  Bundle 'dgryski/vim-godef'
  autocmd BufWritePre *.go Fmt

  " gocode
  Bundle 'Blackrush/vim-gocode'
  let g:SuperTabDefaultCompletionType = "context"
  set completeopt-=preview
" }}}

" git {{{
  Bundle 'mattn/webapi-vim'
  Bundle 'vim-scripts/Gist.vim'
  Bundle 'tpope/vim-fugitive'
" }}}

" tags {{{
  Bundle 'xolox/vim-misc'
  Bundle 'xolox/vim-easytags'
  let g:easytags_dynamic_files = 1
" }}}

" unite {{{
  Bundle 'Shougo/vimproc.vim'
  Bundle 'Shougo/unite.vim'
  " Always start in insert mode
	let g:unite_enable_start_insert = 1
  " Search settings
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
  call unite#filters#sorter_default#use(['sorter_rank'])
  call unite#set_profile('files', 'smartcase', 1)
  " Open files
  nnoremap <C-P> :<C-u>Unite  -buffer-name=files   -start-insert buffer file_rec/async:!<cr>
  " Search like ack
  nnoremap <Leader>f :Unite grep:. -no-empty -no-start-insert<cr>

  " Yank history
  nnoremap <Leader>y :Unite history/yank<cr>

  " Use Ack
  let g:unite_source_grep_command='ack-grep'
  let g:unite_source_grep_default_opts='--no-heading --no-color'
  let g:unite_source_grep_recursive_opt=''

  autocmd FileType unite call s:unite_settings()
  function! s:unite_settings()
    let b:SuperTabDisabled=1
    imap <silent><buffer><expr> <C-x> unite#do_action('split')
    imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

    nmap <buffer> <ESC> <Plug>(unite_exit)
  endfunction
" }}}
