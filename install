#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

UPGRADE="no"
VERBOSE="no"
SOFTWARE_GROUPS=()

function help() {
  echo ".dotfiles"
  echo
  echo "Usage:"
  echo "  $0 --server"
  echo "  $0 --desktop"
  echo
  echo "Options:"
  echo "  --help     Show this screen."
  echo "  --verbose  Write out install logs."
  echo "  --upgrade  Upgrade everything."
}

for var in "$@"
do
  if [[ "$var" = "--help" ]]; then
    help
    exit
  elif [[ "$var" = "--upgrade" ]]; then
    UPGRADE="yes"
  elif [[ "$var" = "--server" ]]; then
    SOFTWARE_GROUPS=(cli)
  elif [[ "$var" = "--desktop" ]]; then
    SOFTWARE_GROUPS=(cli database dev gui)
  elif [[ "$var" == "--verbose" ]]; then
    VERBOSE="yes"
  fi
done

if [ ${#SOFTWARE_GROUPS[@]} -eq 0 ]; then
  help
  exit 1
fi

export LOG_FILE=$(mktemp)
function write-log-if-error {
  if [[ $? -gt 0 ]]; then
    cat "$LOG_FILE"
  fi
}
trap write-log-if-error EXIT

function print-log {
  if [[ "$VERBOSE" = "yes" ]]; then
    tee -a "$LOG_FILE"
  else
    cat >> "$LOG_FILE"
  fi
}

if [[ "$UPGRADE" = "yes" ]]; then
  echo "Upgrading system..."
  sudo pacman -Syu | print-log 2>&1
fi

PREVIOUS_PWD="$(pwd)"
if ! command -v "yay" &> /dev/null; then
  echo "Installing yay..."
  cd $(mktemp -d)
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si --noconfirm
  cd "$PREVIOUS_PWD"
fi

echo "Installing packages..."
for SOFTWARE_GROUP in "${SOFTWARE_GROUPS[@]}"; do
  PACKAGES_PATH="packages/$SOFTWARE_GROUP.txt"
  AUR_PATH="aur-packages/$SOFTWARE_GROUP.txt"

  if [[ -f "$PACKAGES_PATH" ]]; then
    PACKAGES="$(cat $PACKAGES_PATH)"
    sudo pacman -S --needed --noconfirm $PACKAGES 2>&1 | print-log
  fi

  if [[ -f "$AUR_PATH" ]]; then
    PACKAGES="$(cat $AUR_PATH)"
    yay -S --needed --noconfirm $PACKAGES 2>&1 | print-log
  fi
done

PREVIOUS_PWD="$(pwd)"

for SOFTWARE_GROUP in "${SOFTWARE_GROUPS[@]}"; do
  for INSTALLER in $(ls "installers/$SOFTWARE_GROUP/"); do
    cd $(mktemp -d)
    echo "Installing $SOFTWARE_GROUP/$INSTALLER..."
    UPGRADE=$UPGRADE $PREVIOUS_PWD/installers/$SOFTWARE_GROUP/$INSTALLER 2>&1 | print-log

    cd "$PREVIOUS_PWD"
  done
done
